/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mayuran19.sshdeploy.ui;

import com.jcraft.jsch.JSchException;
import com.mayuran19.sshdeploy.SSHCopy;
import com.mayuran19.sshdeploy.bean.PropertyPlaceHolder;
import com.mayuran19.sshdeploy.helper.ConfigurationHelper;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 *
 * @author mayuran
 */
public class MainApplication extends javax.swing.JFrame {

    private ConfigurationHelper configurationHelper;

    /**
     * Creates new form MainApplication
     */
    public MainApplication() {
        initComponents();
        configurationHelper = new ConfigurationHelper();
        initCustome();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DlgPromptUserInput = new javax.swing.JDialog();
        LblPromptText = new javax.swing.JLabel();
        TxtPromptText = new javax.swing.JTextField();
        DlgPropPlaceHolder = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        TxtDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TxtBuildVersion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TxtDeploymentVersion = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        BtnCopy = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        TxtBuildDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        TxtBuildVer = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        CmbService = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        CmbEnvironment = new javax.swing.JComboBox();
        BtnPrepare = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        DlgPromptUserInput.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        DlgPromptUserInput.setAlwaysOnTop(true);
        DlgPromptUserInput.setModal(true);

        javax.swing.GroupLayout DlgPromptUserInputLayout = new javax.swing.GroupLayout(DlgPromptUserInput.getContentPane());
        DlgPromptUserInput.getContentPane().setLayout(DlgPromptUserInputLayout);
        DlgPromptUserInputLayout.setHorizontalGroup(
            DlgPromptUserInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DlgPromptUserInputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LblPromptText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtPromptText, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );
        DlgPromptUserInputLayout.setVerticalGroup(
            DlgPromptUserInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DlgPromptUserInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DlgPromptUserInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TxtPromptText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblPromptText, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DlgPropPlaceHolder.setAlwaysOnTop(true);
        DlgPropPlaceHolder.setModal(true);
        DlgPropPlaceHolder.setResizable(false);

        jLabel1.setText("Date");

        jLabel2.setText("Build Version");

        jLabel3.setText("Deployment Version");

        jButton1.setText("Cancel");

        jButton2.setText("Ok");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DlgPropPlaceHolderLayout = new javax.swing.GroupLayout(DlgPropPlaceHolder.getContentPane());
        DlgPropPlaceHolder.getContentPane().setLayout(DlgPropPlaceHolderLayout);
        DlgPropPlaceHolderLayout.setHorizontalGroup(
            DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DlgPropPlaceHolderLayout.createSequentialGroup()
                .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DlgPropPlaceHolderLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(TxtDeploymentVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                                .addComponent(TxtBuildVersion))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DlgPropPlaceHolderLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        DlgPropPlaceHolderLayout.setVerticalGroup(
            DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DlgPropPlaceHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtBuildVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(TxtDeploymentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DlgPropPlaceHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BtnCopy.setText("Copy");
        BtnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCopyActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane1);

        jLabel4.setText("Build Date:");

        jLabel5.setText("Build Version:");

        jLabel6.setText("Service:");

        CmbService.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "G3BPService", "G3RTService", "G3SACHWeb", "G3BankWeb", "G3RPTService", "report_templates", "common_jars" }));

        jLabel7.setText("Environment:");

        CmbEnvironment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SIT", "PREUAT" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TxtBuildDate)
                    .addComponent(CmbEnvironment, 0, 177, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtBuildVer, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CmbService, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TxtBuildDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(TxtBuildVer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(CmbService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(CmbEnvironment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        BtnPrepare.setText("Prepare");
        BtnPrepare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrepareActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BtnCopy, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(BtnPrepare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnPrepare)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnCopy)
                        .addGap(0, 331, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCopyActionPerformed
        SSHCopy sSHCopy = new SSHCopy();
        String buildDate = TxtBuildDate.getText();
        String buildVersion = TxtBuildVer.getText();
        String service = CmbService.getSelectedItem().toString();
        String environment = CmbEnvironment.getSelectedItem().toString();

        String deploymentServerIP = null;
        String deploymentServerUsername = null;
        String deploymentServerPassword = null;

        String remoteIP = this.configurationHelper.getProperty("server1.ip.address");
        String remoteUsername = this.configurationHelper.getProperty("server1.username");
        String remotePassword = this.configurationHelper.getProperty("server1.password");
        Integer remotePort = Integer.valueOf(this.configurationHelper.getProperty("server1.port"));

        if (CmbEnvironment.getSelectedItem().toString().equals("SIT")) {
            deploymentServerIP = this.configurationHelper.getProperty("server2.ip.address");
            deploymentServerUsername = this.configurationHelper.getProperty("server2.username");
            deploymentServerPassword = this.configurationHelper.getProperty("server2.password");
        } else if (CmbEnvironment.getSelectedItem().toString().equals("PREUAT")) {
            deploymentServerIP = this.configurationHelper.getProperty("server3.ip.address");
            deploymentServerUsername = this.configurationHelper.getProperty("server3.username");
            deploymentServerPassword = this.configurationHelper.getProperty("server3.password");
        }

        StringBuffer command = new StringBuffer();
        command.append("scp -rpv");
        command.append(String.format(" /Projects/Release/G3/%s/ALL/%s/%s/%s/02_OBJECT/G3TCSVR1/opt/appserver/%s/webapps/*", environment, buildDate, buildVersion, environment, service));
        command.append(String.format(" %s@%s:", deploymentServerUsername, deploymentServerIP));
        command.append(String.format("/G3App/appshare/deployment/%s/%s/%s", buildVersion, environment, service));

        try {
            sSHCopy.executeCommand(remoteIP, remoteUsername, remotePassword, remotePort, command.toString(), jTextPane1);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BtnCopyActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    }//GEN-LAST:event_jButton2ActionPerformed

    private void BtnPrepareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrepareActionPerformed
        try {
            if (CmbEnvironment.getSelectedItem().toString().equals("SIT")) {
                this.prepareSIT();
            } else if (CmbEnvironment.getSelectedItem().toString().equals("PREUAT")) {
                this.preparePREUAT();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BtnPrepareActionPerformed

    private void prepareSIT() throws JSchException, IOException {
        StringBuffer command = new StringBuffer();
        String version = TxtBuildVer.getText();
        String environment = CmbEnvironment.getSelectedItem().toString();
        command.append("mkdir -p");
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/G3BPService", version, environment));
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/G3RTService", version, environment));
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/G3RPTService", version, environment));
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/G3SACHWeb", version, environment));
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/G3BankWeb", version, environment));
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/appfc/conf/G3RPTService/Templates/", version, environment));
        command.append(String.format(" /G3App/appshare/deploymemt/%s/%s/appshare/program/base/lib/", version, environment));

        SSHCopy sSHCopy = new SSHCopy();

        String remoteIP = this.configurationHelper.getProperty("server2.ip.address");
        String remoteUsername = this.configurationHelper.getProperty("server2.username");
        String remotePassword = this.configurationHelper.getProperty("server2.password");
        Integer remotePort = Integer.valueOf(this.configurationHelper.getProperty("server2.port"));

        sSHCopy.executeCommand(remoteIP, remoteUsername, remotePassword, remotePort, command.toString(), jTextPane1);
    }

    private void preparePREUAT() throws JSchException, IOException {
        StringBuffer command = new StringBuffer();
        String version = TxtBuildVer.getText();
        String environment = CmbEnvironment.getSelectedItem().toString();
        command.append("mkdir -p");
        command.append(String.format(" %s/%s/G3BPService", version, environment));
        command.append(String.format(" %s/%s/G3RTService", version, environment));
        command.append(String.format(" %s/%s/G3RPTService", version, environment));
        command.append(String.format(" %s/%s/G3SACHWeb", version, environment));
        command.append(String.format(" %s/%s/G3BankWeb", version, environment));
        command.append(String.format(" %s/%s/appfc/conf/G3RPTService/Templates/", version, environment));
        command.append(String.format(" %s/%s/appshare/program/base/lib/", version, environment));

        SSHCopy sSHCopy = new SSHCopy();

        String remoteIP = this.configurationHelper.getProperty("server3.ip.address");
        String remoteUsername = this.configurationHelper.getProperty("server3.username");
        String remotePassword = this.configurationHelper.getProperty("server3.password");
        Integer remotePort = Integer.valueOf(this.configurationHelper.getProperty("server3.port"));

        sSHCopy.executeCommand(remoteIP, remoteUsername, remotePassword, remotePort, command.toString(), jTextPane1);
    }

    private void backup() {
        SSHCopy sSHCopy = new SSHCopy();
        try {
            String srcWithPlaceHolder = configurationHelper.getProperty("server1.build.directory");
            Map<String, PropertyPlaceHolder> sourceMap = configurationHelper.getPropertiesPlaceHolders("server1.build.directory");

            PromptDialog promptDialogSrc = new PromptDialog(this);
            Map<String, String> propKeyValueSrc = promptDialogSrc.getPlaceHolderValueMap(sourceMap);
            List<String> sortedKeysSrc = new ArrayList(propKeyValueSrc.keySet());
            Collections.sort(sortedKeysSrc);
            String[] srcArray = new String[sortedKeysSrc.size()];
            for (int i = 0; i < sortedKeysSrc.size(); i++) {
                srcArray[i] = propKeyValueSrc.get(sortedKeysSrc.get(i));
            }
            String src = MessageFormat.format(srcWithPlaceHolder, srcArray);
            System.out.println(src);

            String destWithPlaceHolder = configurationHelper.getProperty("server2.deployment.directory");
            Map<String, PropertyPlaceHolder> destMap = configurationHelper.getPropertiesPlaceHolders("server2.deployment.directory");
            PromptDialog promptDialogDest = new PromptDialog(this);
            Map<String, String> propKeyValueDest = promptDialogDest.getPlaceHolderValueMap(destMap);
            List<String> sortedKeysDest = new ArrayList(propKeyValueDest.keySet());
            Collections.sort(sortedKeysDest);
            String[] destArray = new String[sortedKeysDest.size()];
            for (int i = 0; i < sortedKeysDest.size(); i++) {
                destArray[i] = propKeyValueDest.get(sortedKeysDest.get(i));
            }
            String dest = MessageFormat.format(destWithPlaceHolder, destArray);
            System.out.println(dest);

            String remoteIP = this.configurationHelper.getProperty("server1.ip.address");
            String remoteUsername = this.configurationHelper.getProperty("server1.username");
            String remotePassword = this.configurationHelper.getProperty("server1.password");
            Integer remotePort = Integer.valueOf(this.configurationHelper.getProperty("server1.port"));
            StringBuffer command = new StringBuffer();
            command.append("scp ");
            command.append(src);
            command.append(" ");
            command.append(dest);

            System.out.println("command: " + command.toString());

            sSHCopy.executeCommand(remoteIP, remoteUsername, remotePassword, remotePort, command.toString(), jTextPane1);
        } catch (JSchException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new MainApplication().setVisible(true);
            }
        });
    }

    private void initCustome() {
        Date dateNow = new Date();
        SimpleDateFormat dateformatyyyyMMdd = new SimpleDateFormat("yyyyMMdd");
        String date_to_string = dateformatyyyyMMdd.format(dateNow);
        TxtBuildDate.setText(date_to_string);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCopy;
    private javax.swing.JButton BtnPrepare;
    private javax.swing.JComboBox CmbEnvironment;
    private javax.swing.JComboBox CmbService;
    private javax.swing.JDialog DlgPromptUserInput;
    private javax.swing.JDialog DlgPropPlaceHolder;
    private javax.swing.JLabel LblPromptText;
    private javax.swing.JTextField TxtBuildDate;
    private javax.swing.JTextField TxtBuildVer;
    private javax.swing.JTextField TxtBuildVersion;
    private javax.swing.JTextField TxtDate;
    private javax.swing.JTextField TxtDeploymentVersion;
    private javax.swing.JTextField TxtPromptText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
